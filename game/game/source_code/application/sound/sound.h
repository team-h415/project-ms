//================================================================================
// サウンド[Sound.h]
// 製作者 : 岩澤剛志
//================================================================================

//================================================================================
// インクルードガード
//================================================================================
#ifndef _SOUND_H_
#define _SOUND_H_

//================================================================================
// インクルードファイル
//================================================================================
#include <xaudio2.h>
#include <stdio.h>
#include <memory>
#include <vector>
using namespace std;

//================================================================================
// クラス定義
//================================================================================
class Sound
{
public:
	//================================================================================
	// 定数定義
	//================================================================================
	// サウンドのフェードを行わない
	static const int SOUND_FADE_NONE = -1;

	//================================================================================
	// サウンド使用の準備
	// 返り値 : なし
	// 引数1 : なし
	//================================================================================
	static void Setup(void);

	//================================================================================
	// サウンドの終了
	// 返り値 : なし
	// 引数1 : なし
	//================================================================================
	static void End(void);

	//================================================================================
	// サウンドのロード
	// 返り値 : サウンドクラスポインタ
	// 引数1 : サウンドネーム
	// 引数2 : サウンドの最大ボリューム
	//================================================================================
	static Sound* LoadSound(const char* sound_path, const float set_max = 1.0f);

	//================================================================================
	// サウンドのロードと再生
	// サウンドをロードすると同時に再生し、再生が終了したら解放します。衝突音などの、なんらかの現象で起こる音で使いまわします
	// 返り値 : サウンドクラスポインタ
	// 引数1 : サウンドネーム
	// 引数2 : サウンドボリューム
	//================================================================================
	static void LoadAndPlaySE(const char* sound_path, float set_volume = 1.0f);

	//================================================================================
	// サウンドの解放
	// 返り値 : なし
	// 引数1 : サウンドクラスポインタのポインタ
	// 引数2 : フェードアウト時間
	//================================================================================
	static void ReleaseSound(Sound** dp_sound, int fade_time = SOUND_FADE_NONE);

	//================================================================================
	// サウンドの全解放
	// 返り値 : なし
	// 引数1 : フェードアウト時間
	//================================================================================
	static void ReleaseAll(int fade_time = SOUND_FADE_NONE);

	//================================================================================
	// 全サウンドの更新
	// 返り値 : なし
	// 引数1 : なし
	//================================================================================
	static void UpdateAll(void);

	//================================================================================
	// サウンドの再生
	// 返り値 : なし
	// 引数1 : ループフラグ
	// 引数2 : フェードイン時間
	//================================================================================
	void Play(bool loop_flag, int fade_time = SOUND_FADE_NONE);

	//================================================================================
	// セグメント停止
	// 返り値 : なし
	// 引数1 : フェードアウト時間
	//================================================================================
	void Stop(int fade_time = SOUND_FADE_NONE);

	void SetCurrentVolume(float set_volume){if(set_volume < 0.0f){set_volume = 0.0f;}if(set_volume > max_volume_){set_volume = max_volume_;} source_voice_->SetVolume(set_volume);}
	void AddCurrentVolume(float AddVolume){float set_volume; source_voice_->GetVolume(&set_volume); set_volume += AddVolume; if(set_volume < 0.0f){set_volume = 0.0f;}if(set_volume > max_volume_){set_volume = max_volume_;} source_voice_->SetVolume(set_volume);}
	float GetCurrentVolume(void){float returnVolume; source_voice_->GetVolume(&returnVolume); return returnVolume;}

	void SetMaxVolume(float set_max){max_volume_ = set_max; if(max_volume_ > 1.0f){max_volume_ = 1.0f;}else if(max_volume_ < 0.0f){max_volume_ = 0.0f;}}
	void AddMaxVolume(float set_max){max_volume_ += set_max; if(max_volume_ > 1.0f){max_volume_ = 1.0f;}else if(max_volume_ < 0.0f){max_volume_ = 0.0f;}}
	float GetMaxVolume(void){return max_volume_;}

private:

	//================================================================================
	// サウンドのコンストラクタ
	// 返り値 : なし
	// 引数1 : サウンドネーム
	//================================================================================
	Sound(const char* pName);

	//================================================================================
	// サウンドのデストラクタ
	// 返り値 : なし
	// 引数1 : なし
	//================================================================================
	~Sound(void);

	//================================================================================
	// サウンドの更新
	// 返り値 : なし
	// 引数1 : なし
	//================================================================================
	void Update(void);

	//================================================================================
	// サウンドのチャンクチェク
	// 返り値 : なし
	// 引数1 : 
	//================================================================================
	static HRESULT CheckChunk(HANDLE file_handle, DWORD format, DWORD *chunk_size, DWORD *chunk_data_position);

	//================================================================================
	// サウンドのチャンク読み込み
	// 返り値 : なし
	// 引数1 : サウンドネーム
	//================================================================================
	static HRESULT ReadChunkData(HANDLE file_handle, void *pBuffer, DWORD dw_buffersize, DWORD dw_bufferoffset);

	//================================================================================
	// 変数宣言
	//================================================================================
	static IXAudio2*				x_audio2_;					// XAudio2オブジェクトへのインターフェイス
	static IXAudio2MasteringVoice*	mastering_voice_;			// マスターボイス
	static vector<Sound*>			sound_array_;				// サウンドクラスポインタ配列
	static int						count_sound_;				// サウンドクラスカウント
	IXAudio2SourceVoice*			source_voice_;				// ソースボイス
	BYTE*							data_audio_;				// オーディオデータ
	DWORD							size_audio_;				// オーディオデータサイズ
	float							max_volume_;				// 最大ボリューム
	bool							fade_flag_;					// フェード
	float							fade_power_;				// フェードパワー
	bool							death_flag_;				// デス
	bool							master_flag_;				// 管理者確認
};

#endif
